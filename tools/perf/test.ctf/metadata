/* CTF 1.8 */

trace {
	major = 1;
	minor = 8;
	uuid = "eb518a16-54cf-421e-8703-99c458f3b81c";
	byte_order = le;
	packet.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } magic;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } uuid[16];
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } stream_id;
	} align(8);
};

env {
	host = "armor";
	sysname = "Linux";
	release = "5.18.19-et+";
	version = "5.18.19.g1f3dfd1288d6";
	machine = "aarch64";
	domain = "kernel";
	tracer_name = "perf";
};

clock {
	name = perf_clock;
	uuid = "553efbcc-00ed-44e0-9b0d-d0fd054f695f";
	description = "perf clock";
	freq = 1000000000;
	precision = 10;
	offset_s = 0;
	offset = 0;
	absolute = FALSE;
};

stream {
	id = 0;
	event.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } id;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.perf_clock.value; } timestamp;
	} align(8);

	packet.context := struct {
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } timestamp_begin;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } timestamp_end;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } content_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } packet_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } events_discarded;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } cpu_id;
	} align(8);
};

event {
	id = 0;
	name = "arm_spe/jitter=1,load_filter=1,event_filter=0x20/";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } perf_ip;
		integer { size = 32; align = 1; signed = true; encoding = none; base = decimal; byte_order = le; } perf_tid;
		integer { size = 32; align = 1; signed = true; encoding = none; base = decimal; byte_order = le; } perf_pid;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } perf_id;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } perf_data_src;
	} align(1);
};

event {
	id = 1;
	name = "dummy:u";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } perf_ip;
		integer { size = 32; align = 1; signed = true; encoding = none; base = decimal; byte_order = le; } perf_tid;
		integer { size = 32; align = 1; signed = true; encoding = none; base = decimal; byte_order = le; } perf_pid;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } perf_id;
	} align(1);
};

event {
	id = 2;
	name = "perf_comm";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } pid;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } tid;
		string { encoding = UTF8; } comm;
	} align(8);
};

event {
	id = 3;
	name = "perf_exit";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } pid;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } ppid;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } tid;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } ptid;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } time;
	} align(1);
};

event {
	id = 4;
	name = "perf_fork";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } pid;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } ppid;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } tid;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } ptid;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } time;
	} align(1);
};

event {
	id = 5;
	name = "perf_mmap";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } pid;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } tid;
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } start;
		string { encoding = UTF8; } filename;
	} align(8);
};

event {
	id = 6;
	name = "perf_mmap2";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } pid;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } tid;
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } start;
		string { encoding = UTF8; } filename;
	} align(8);
};

